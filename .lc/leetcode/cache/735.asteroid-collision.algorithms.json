{"id":735,"fid":735,"name":"Asteroid Collision","slug":"asteroid-collision","link":"https://leetcode.com/problems/asteroid-collision/description/","percent":37.5933967061769,"level":"Medium","category":"algorithms","totalAC":"19.3K","totalSubmit":"51.4K","desc":"\r\nWe are given an array asteroids of integers representing asteroids in a row.\r\n\r\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left).  Each asteroid moves at the same speed.\r\n\r\nFind out the state of the asteroids after all collisions.  If two asteroids meet, the smaller one will explode.  If both are the same size, both will explode.  Two asteroids moving in the same direction will never meet.\r\n\r\n\r\nExample 1:\r\n\r\nInput: \r\nasteroids = [5, 10, -5]\r\nOutput: [5, 10]\r\nExplanation: \r\nThe 10 and -5 collide resulting in 10.  The 5 and 10 never collide.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \r\nasteroids = [8, -8]\r\nOutput: []\r\nExplanation: \r\nThe 8 and -8 collide exploding each other.\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: \r\nasteroids = [10, 2, -5]\r\nOutput: [10]\r\nExplanation: \r\nThe 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.\r\n\r\n\r\n\r\nExample 4:\r\n\r\nInput: \r\nasteroids = [-2, -1, 1, 2]\r\nOutput: [-2, -1, 1, 2]\r\nExplanation: \r\nThe -2 and -1 are moving left, while the 1 and 2 are moving right.\r\nAsteroids moving the same direction never meet, so no asteroids will meet each other.\r\n\r\n\r\n\r\nNote:\r\nThe length of asteroids will be at most 10000.\r\nEach asteroid will be a non-zero integer in the range [-1000, 1000]..\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] asteroidCollision(int[] asteroids) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def asteroidCollision(self, asteroids):\n        \"\"\"\n        :type asteroids: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def asteroidCollision(self, asteroids: 'List[int]') -> 'List[int]':\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] AsteroidCollision(int[] asteroids) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function(asteroids) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} asteroids\n# @return {Integer[]}\ndef asteroid_collision(asteroids)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func asteroidCollision(_ asteroids: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func asteroidCollision(asteroids []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def asteroidCollision(asteroids: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun asteroidCollision(asteroids: IntArray): IntArray {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn asteroid_collision(asteroids: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $asteroids\n     * @return Integer[]\n     */\n    function asteroidCollision($asteroids) {\n        \n    }\n}"}],"testcase":"[5,10,-5]","testable":true,"templateMeta":{"name":"asteroidCollision","params":[{"name":"asteroids","type":"integer[]"}],"return":{"type":"integer[]"}}}