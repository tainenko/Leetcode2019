{"id":924,"fid":888,"name":"Fair Candy Swap","slug":"fair-candy-swap","link":"https://leetcode.com/problems/fair-candy-swap/description/","percent":55.286776647576716,"level":"Easy","category":"algorithms","totalAC":"19.4K","totalSubmit":"35.1K","desc":"Alice and Bob have candy bars of different sizes: A[i] is the size of the i-th bar of candy that Alice has, and B[j] is the size of the j-th bar of candy that Bob has.\r\n\r\nSince they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy.  (The total amount of candy a person has is the sum of the sizes of candy bars they have.)\r\n\r\nReturn an integer array ans where ans[0] is the size of the candy bar that Alice must exchange, and ans[1] is the size of the candy bar that Bob must exchange.\r\n\r\nIf there are multiple answers, you may return any one of them.  It is guaranteed an answer exists.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: A = [1,1], B = [2,2]\r\nOutput: [1,2]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = [1,2], B = [2,3]\r\nOutput: [1,2]\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: A = [2], B = [1,3]\r\nOutput: [2,3]\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: A = [1,2,5], B = [2,4]\r\nOutput: [5,4]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 10000\r\n\t1 <= B.length <= 10000\r\n\t1 <= A[i] <= 100000\r\n\t1 <= B[i] <= 100000\r\n\tIt is guaranteed that Alice and Bob have different total amounts of candy.\r\n\tIt is guaranteed there exists an answer.\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> fairCandySwap(vector<int>& A, vector<int>& B) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] fairCandySwap(int[] A, int[] B) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def fairCandySwap(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def fairCandySwap(self, A: 'List[int]', B: 'List[int]') -> 'List[int]':\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fairCandySwap(int* A, int ASize, int* B, int BSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] FairCandySwap(int[] A, int[] B) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number[]}\n */\nvar fairCandySwap = function(A, B) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef fair_candy_swap(a, b)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func fairCandySwap(_ A: [Int], _ B: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func fairCandySwap(A []int, B []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def fairCandySwap(A: Array[Int], B: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun fairCandySwap(A: IntArray, B: IntArray): IntArray {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn fair_candy_swap(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @return Integer[]\n     */\n    function fairCandySwap($A, $B) {\n        \n    }\n}"}],"testcase":"[1,1]\n[2,2]","testable":true,"templateMeta":{"name":"fairCandySwap","params":[{"name":"A","type":"integer[]"},{"name":"B","type":"integer[]"}],"return":{"type":"integer[]"}}}