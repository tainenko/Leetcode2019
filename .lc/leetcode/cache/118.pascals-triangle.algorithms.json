{"id":118,"fid":118,"name":"Pascal's Triangle","slug":"pascals-triangle","link":"https://leetcode.com/problems/pascals-triangle/description/","percent":45.1372052851688,"level":"Easy","category":"algorithms","totalAC":"238.5K","totalSubmit":"528.3K","desc":"Given a non-negative integerÂ numRows, generate the first numRows of Pascal's triangle.\r\n\r\n\r\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\r\n\r\nExample:\r\n\r\n\r\nInput: 5\r\nOutput:\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int** columnSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generate(numRows int) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun generate(numRows: Int): List<List<Int>> {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $numRows\n     * @return Integer[][]\n     */\n    function generate($numRows) {\n        \n    }\n}"}],"testcase":"5","testable":true,"templateMeta":{"name":"generate","params":[{"name":"numRows","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true,"rowsize":"param_1"}}}